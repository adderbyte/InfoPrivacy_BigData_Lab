This was similar to a simple buffer overflow attack, but instead of being able to
overflow the buffer by an arbitrary amount it only allows overflow by one byte.
The bug occurs in the for-loop of nstrcpy() because the loop has one too many
iterations (it goes from 0 to len instead of 0 to len - 1).  Only overflowing by
this small amount only allows overwriting of the saved frame pointer, but this can 
be exploited.
When the nstrcpy() function ends the saved frame pointer becomes the stack pointer
again as the stack shrinks.  Then, 4 is added to ESP/stack pointer since the frame
pointer was popped before returning.  Then the program will pop the first word on
the stack after ESP, thinking that it is EIP/instruction pointer.  This means that
by altering the frame pointer we can alter the stack pointer and make it pop
whatever we want into EIP.  One issue that makes it slightly more complicated is
that we can only modify the least significant byte of the saved frame pointer, but
this isn't a problem.
In our exploit, we made a buffer with one more byte than the target was written
to handle (length 241).  We then filled it with mostly NOPs again, then the 
shellcode, then the address of the shellcode, then the byte which we wanted to 
use to overwrite the last byte of the frame pointer (0x70).  We chose this value 
so that it would point back to the location where the address of the shellcode 
was stored.  Then, when the program popped the address into the EIP the program 
would start execution at the location of the shellcode (or somewhere in the 
preceding NOP region).

ebp of foo: 0xbffffda8 during overwrite we have : 0xbffffd00 (because we filled with null )

As we already know user input of size 240, overwrites the LSB of foo’s EBP with a NULL byte. So when foo’s EBP stored just above destination buffer ‘buf’ is overwritten with a single NULL byte, ebp gets changed from 0xbffffda8 to 0xbffffd00. And during restoration we 0xbffffd00 chnges to 0xbffffd04. Then the last 4 bit to overwrite is:

Last 4 bit to over write : 0xbffffd04 - 0xbffffc88 = '7C'


